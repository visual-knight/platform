// SQLite / Mysql / Postgres
datasource db {
  // https://github.com/prisma/prisma2/blob/master/docs/core/connectors
  // mysql | sqlite | postgresql
  provider = "postgresql"
  url      = env("VK_DATABASE")
}

generator photon {
  provider     = "prisma-client-js"
  binaryTarget = ["native", "linux-glibc-libssl1.0.2"]
  output       = "../../node_modules/@generated/photonjs"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  password String
  lastname String?
  forename String?
  active   Boolean @default(false)
  role     Role    @default(CUSTOMER)
  apiKey   String  @unique
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  tests       Test[]
}

model Test {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  project    Project @relation(fields: [projectId], references: [id])
  projectId  String  @map("project")
  variations Variation[]
}

model Variation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  browserName String
  deviceName  String
  test        Test   @relation(fields: [testId], references: [id])
  testId      String @map("test")

  testSessions   TestSession[]
  additionalData String?
  baseline       TestSession?  @relation(name: "VariationBaseline", fields: [baselineId], references: [id])
  baselineId     String?       @map("baseline")
}

model TestSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  diffImageKey       String?
  imageKey           String?
  misMatchPercentage Float?
  misMatchTolerance  Float
  isSameDimensions   Boolean?
  variation          Variation        @relation(fields: [variationId], references: [id])
  variationId        String
  state              TestSessionState @default(PENDING)
  stateChangedByUser User?
  stateComment       String?
  autoBaseline       Boolean          @default(false)

  baselineRef     Variation? @relation(name: "VariationBaseline")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum TestSessionState {
  PENDING
  UNRESOLVED
  ACCEPTED
  DECLINED
}
