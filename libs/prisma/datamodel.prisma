type User {
  id: ID! @id
  email: String! @unique
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  lastname: String
  phoneNumber: String
  forename: String
  active: Boolean! @default(value: false)
  role: Role! @default(value: "CUSTOMER")
  projects: [Project!]! @relation(link: TABLE, name: "ProjectOnUser")
  apiKey: String!
}

type RefreshTokenList {
  userId: ID! @id
  refreshToken: String! @unique
}

type Project {
  id: ID! @id
  createdAt: DateTime!
  name: String!
  tests: [Test!]! @relation(link: TABLE, name: "TestOnProject", onDelete: CASCADE)
  updatedAt: DateTime!
  users: [User!]! @relation(link: TABLE, name: "ProjectOnUser", onDelete: SET_NULL)
  description: String
}

type Test {
  id: ID! @id
  createdAt: DateTime!
  name: String!
  project: Project @relation(name: "TestOnProject")
  updatedAt: DateTime!
  variations: [Variation!]!
    @relation(link: TABLE, name: "VariationOnTest", onDelete: CASCADE)
}

type TestSession {
  id: ID! @id
  createdAt: DateTime!
  diffImageKey: String
  imageKey: String
  misMatchPercentage: Float
  misMatchTolerance: Float!
  isSameDimensions: Boolean
  updatedAt: DateTime!
  variation: Variation @relation(link: INLINE, name: "TestSessionOnVariation")
  baselineForDiffRef: TestSession @relation(link: INLINE, name: "DiffBaselineOnTestSession")
  baselineRef: Variation @relation(link: INLINE, name: "BaselineRefOnVariation")
  diffBaseline: TestSession @relation(link: INLINE, name: "DiffBaselineOnTestSession")
  state: TestSessionState! @default(value: "PENDING")
  stateChangedByUser: User
  stateComment: String
  autoBaseline: Boolean! @default(value: "false")
}

type Variation {
  id: ID! @id
  additionalData: Json
  browserName: String
  createdAt: DateTime!
  deviceName: String
  test: Test @relation(name: "VariationOnTest")
  testSessions: [TestSession!]!
    @relation(name: "TestSessionOnVariation", onDelete: CASCADE)
  updatedAt: DateTime!
  baselineVariationRef: TestSession @relation(link: INLINE, name: "BaselineRefOnVariation")
}

enum Role {
  OWNER
  CUSTOMER
}

enum TestSessionState {
  PENDING
  UNRESOLVED
  ACCEPTED
  DECLINED
}

# type Notification {
#   id: ID! @unique
#   type: NotificationType!
#   createdAt: DateTime!
#   updatedAt: DateTime!
#   user: User!
#   text: String
# }

# enum NotificationType {
#   MESSAGE
#   TEST_STATE
# }
