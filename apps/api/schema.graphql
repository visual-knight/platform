# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthPayload {
  token: AuthToken!
  user: User!
}

type AuthToken {
  expiresIn: Int!
  accessToken: String!
}

"""Use JavaScript Date object for date/time fields."""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  login(password: String!, email: String!): AuthPayload!
  signup(password: String!, email: String!): AuthPayload!
  verifyEmail(token: String!): Boolean!
  resendVerifyEmail: Boolean!
  changePassword(password: String!): Boolean!
  forgotPassword(email: String!): Boolean!
  resetPassword(token: String!, password: String!): Boolean!
  deleteUser(id: String!): User!
  updateUser(data: UpdateUserInput!): User!
  inviteNewUser(email: String!): User!
  completeInvitation(password: String!, token: String!): AuthPayload!
  createProject(data: ProjectDataArgs!): ProjectType!
  deleteProject(projectId: String!): ProjectType!
  updateProject(data: ProjectDataArgs!, projectId: String!): ProjectType!
  deleteTestSession(testSessionId: String!): TestSessionType!
  updateTestSession(data: TestSessionDataArgs!, testSessionId: String!): TestSessionType!
  deleteTest(testId: String!): TestType!
  deleteVariation(variationId: String!): VariationType!
  invokeTestSession(autoBaseline: Boolean!, capabilities: JSON!, misMatchTolerance: Float!, project: String!, testname: String!): String!
  uploadScreenshot(testSessionId: String!, base64Image: String!): TestSessionComparison
}

input ProjectDataArgs {
  name: String
  description: String
}

type ProjectType {
  id: ID!
  name: String!
  description: String
}

type Query {
  me: User!
  project(projectId: String!): ProjectType!
  projects: [ProjectType!]!
  projectsCount: Int!
  testSession(testSessionId: String!): TestSessionType!
  testSessions(where: TestSessionDataArgs): [TestSessionType!]!
  testSessionsCount(where: TestSessionDataArgs): Int!
  test(testId: String!): TestType!
  tests: [TestType!]!
  testsCount: Int!
  variation(variationId: String!): VariationType!
  variations(testId: String!): [VariationType!]!
  variationsCount(testId: String!): Int!
}

type TestSessionComparison {
  id: ID!
  diffImageKey: String
  imageKey: String
  misMatchPercentage: Float
  misMatchTolerance: Float!
  isSameDimensions: Boolean
  state: String!
  stateComment: String
  autoBaseline: Boolean!
  createdAt: DateTime!
  link: String!
}

input TestSessionDataArgs {
  id: ID
  diffImageKey: String
  imageKey: String
  misMatchPercentage: Float
  misMatchTolerance: Float!
  isSameDimensions: Boolean
  state: String!
  stateComment: String
  autoBaseline: Boolean!
}

type TestSessionType {
  id: ID!
  diffImageKey: String
  imageKey: String
  misMatchPercentage: Float
  misMatchTolerance: Float!
  isSameDimensions: Boolean
  state: String!
  stateComment: String
  autoBaseline: Boolean!
  createdAt: DateTime!
}

type TestType {
  id: ID!
  name: String!
  project: ProjectType
  variations: [VariationType!]!
}

input UpdateUserInput {
  email: String!
  forename: String
  lastname: String
}

type User {
  id: ID!
  email: String!
  forename: String
  lastname: String
  apiKey: String!
  active: Boolean!
}

type VariationType {
  id: ID!
  browserName: String!
  deviceName: String!
  createdAt: DateTime!
  additionalData: JSON
  baseline: TestSessionType
  testSessions: [TestSessionType!]!
}
